stages:
 - benchmark
 - publish

before_script:
  - git submodule sync --recursive
  - git submodule update --init --recursive

sysbench-benchmark:
  stage: benchmark
  artifacts:
    paths:
      - results.txt
  script:
    # Build Tarantool
    - sudo apt-get update && apt-get install -y -f build-essential cmake coreutils sed libreadline-dev libncurses5-dev libyaml-dev libssl-dev libcurl4-openssl-dev libunwind-dev python python-pip python-setuptools python-dev python-msgpack python-yaml python-argparse python-six python-gevent
    
    - if [ ! -d "$tarantool" ]; then
    -   git clone --recursive https://github.com/tarantool/tarantool.git -b 1.8 tarantool
    - fi
    - cd tarantool; git pull; cmake .; make; cd ..;

    # Build SysBench
    - if [ ! -d "$tarantool-c" ]; then
    -   git clone --recursive https://github.com/tarantool/tarantool-c tarantool-c
    - fi
    - cd tarantool-c; git pull; cmake . ; make; make install; cd ..;
    
    - ./autogen.sh; ./configure --with-tarantool; make;

    # Run Tarantool
    - rm *.xlog ; rm *.snap
    - ./tarantool/src/tarantool start-server.lua &
    - sleep 2; TNT_PID=$!

    # Run SysBench, Print results to screen, Save results to results.txt
    - echo "test_name:result[trps]"
    - ./testing-tnt.sh --port=3301 --threads=1 | tee result.txt

    # Clear
    - kill $TNT_PID ; rm *.xlog ; rm *.snap

sysbench-publish:
  stage: publish
  script:
   - echo "MOCK push to microb"
          #  - python export.py auth.conf result.txt
  only:
   - master
